import streamlit as st
import numpy as np
import pandas as pd
from sklearn.metrics import classification_report
import joblib
import plotly.graph_objects as go
import time


def main():    
    st.title('Deep Learning - Recurrent Neural Network')
    
    # Affichage du bouton
    show_code_rnn = st.button("Afficher le code", key="button8")
    
    # Affichage de l'image lorsque le bouton est pressé
    if show_code_rnn:
        code = '''
        import tensorflow as tf

        # Créer le modèle RNN
        def create_rnn_model():
            inputs = tf.keras.Input(shape=(187,))

            expand = tf.expand_dims(inputs, axis=2)
            gru = tf.keras.layers.GRU(256, return_sequences=True)(expand)
            dense = tf.keras.layers.Dense(100, activation='relu')(gru)
            flatten = tf.keras.layers.Flatten()(dense)
            outputs = tf.keras.layers.Dense(1, activation='sigmoid')(flatten)

            model = tf.keras.Model(inputs=inputs, outputs=outputs)
            
            model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])
            
            # Add early stopping
            early_stopping = tf.keras.callbacks.EarlyStopping(monitor='val_loss', patience=3, restore_best_weights=True)

            # Train the model with early stopping
            history = model.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=5, batch_size=16, callbacks=[early_stopping])
            
            return model, history
        '''
        st.code(code, language='python')
        
        hide_code_rnn = st.button("Cacher le code")
        
        if hide_code_rnn:
            show_code = False
    
    # Liste des signaux disponibles
    signal1 = [1.0,0.9003241658210753,0.3585899472236633,0.051458671689033515,0.04659643396735191,0.1268233358860016,0.1333063244819641,0.11912479996681212,0.11061588674783705,0.11304700374603273,0.10656402260065079,0.10696920752525327,0.11588330566883087,0.12236628681421283,0.12236628681421283,0.11952998489141463,0.11588330566883087,0.12236628681421283,0.12601296603679657,0.13371150195598602,0.13492706418037415,0.14262561500072476,0.15113452076911926,0.15842787921428678,0.16369530558586118,0.1738249659538269,0.18881686031818387,0.2078606188297272,0.2309562414884567,0.25850892066955566,0.2945705056190491,0.32576984167099,0.3626418113708496,0.39829820394515997,0.4294975697994233,0.4493516981601715,0.4509724378585816,0.41896271705627447,0.3727714717388153,0.31037276983261103,0.25,0.20421393215656283,0.1689627170562744,0.1474878489971161,0.13047002255916595,0.12439221888780592,0.1175040528178215,0.11669367551803587,0.11588330566883087,0.11871960759162903,0.11547812074422835,0.11385737359523773,0.11952998489141463,0.11669367551803587,0.12277147173881528,0.12074553966522218,0.11669367551803587,0.12277147173881528,0.12641815841197968,0.13168556988239288,0.14181523025035858,0.13938412070274353,0.14505672454833984,0.1434359848499298,0.14100486040115356,0.14059968292713165,0.1381685584783554,0.13695299625396729,0.132090762257576,0.12844409048557281,0.12844409048557281,0.1280388981103897,0.12520259618759155,0.12236628681421283,0.11709886789321902,0.1126418188214302,0.11304700374603273,0.1276337057352066,0.1653160452842712,0.1794975697994232,0.16126418113708496,0.17666126787662506,0.18273906409740448,0.17463533580303192,0.15153971314430237,0.14789302647113797,0.13492706418037415,0.12277147173881528,0.10696920752525327,0.09805510193109512,0.09440843015909196,0.08914100378751753,0.08914100378751753,0.08873581886291505,0.09076175093650816,0.08589951694011687,0.08589951694011687,0.08914100378751753,0.08427876979112627,0.057941652834415436,0.0,0.11628849059343338,0.3095623850822449,0.8342787623405455,0.9643436074256898,0.5615883469581604,0.08144246041774747,0.03241490945219993,0.1126418188214302,0.1523500829935074,0.13573743402957916,0.12479740381240845,0.12358184903860092,0.12358184903860092,0.11588330566883087,0.11547812074422835,0.11669367551803587,0.12479740381240845,0.1280388981103897,0.13006483018398288,0.1268233358860016,0.12965963780879974,0.13614262640476227,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0]
    signal2 = [0,1.0,0.9003241658210753,0.3585899472236633,0.051458671689033515,0.04659643396735191,0.1268233358860016,0.1333063244819641,0.11912479996681212,0.11061588674783705,0.11304700374603273,0.10656402260065079,0.10696920752525327,0.11588330566883087,0.12236628681421283,0.12236628681421283,0.11952998489141463,0.11588330566883087,0.12236628681421283,0.12601296603679657,0.13371150195598602,0.13492706418037415,0.14262561500072476,0.15113452076911926,0.15842787921428678,0.16369530558586118,0.1738249659538269,0.18881686031818387,0.2078606188297272,0.2309562414884567,0.25850892066955566,0.2945705056190491,0.32576984167099,0.3626418113708496,0.39829820394515997,0.4294975697994233,0.4493516981601715,0.4509724378585816,0.41896271705627447,0.3727714717388153,0.31037276983261103,0.25,0.20421393215656283,0.1689627170562744,0.1474878489971161,0.13047002255916595,0.12439221888780592,0.1175040528178215,0.11669367551803587,0.11588330566883087,0.11871960759162903,0.11547812074422835,0.11385737359523773,0.11952998489141463,0.11669367551803587,0.12277147173881528,0.12074553966522218,0.11669367551803587,0.12277147173881528,0.12641815841197968,0.13168556988239288,0.14181523025035858,0.13938412070274353,0.14505672454833984,0.1434359848499298,0.14100486040115356,0.14059968292713165,0.1381685584783554,0.13695299625396729,0.132090762257576,0.12844409048557281,0.12844409048557281,0.1280388981103897,0.12520259618759155,0.12236628681421283,0.11709886789321902,0.1126418188214302,0.11304700374603273,0.1276337057352066,0.1653160452842712,0.1794975697994232,0.16126418113708496,0.17666126787662506,0.18273906409740448,0.17463533580303192,0.15153971314430237,0.14789302647113797,0.13492706418037415,0.12277147173881528,0.10696920752525327,0.09805510193109512,0.09440843015909196,0.08914100378751753,0.08914100378751753,0.08873581886291505,0.09076175093650816,0.08589951694011687,0.08589951694011687,0.08914100378751753,0.08427876979112627,0.057941652834415436,0.0,0.11628849059343338,0.3095623850822449,0.8342787623405455,0.9643436074256898,0.5615883469581604,0.08144246041774747,0.03241490945219993,0.1126418188214302,0.1523500829935074,0.13573743402957916,0.12479740381240845,0.12358184903860092,0.12358184903860092,0.11588330566883087,0.11547812074422835,0.11669367551803587,0.12479740381240845,0.1280388981103897,0.13006483018398288,0.1268233358860016,0.12965963780879974,0.13614262640476227,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0]
    signal3 = [1.0,0.9739696383476258,0.9132320880889891,0.8655097484588622,0.8232104182243347,0.746203899383545,0.6420824527740479,0.547722339630127,0.4262472987174988,0.3253796100616455,0.2798264622688293,0.228850319981575,0.1366594433784485,0.04772234335541725,0.010845987126231192,0.10086768120527267,0.18872016668319705,0.2277657240629196,0.24078090488910675,0.2570498883724213,0.263557493686676,0.2939262390136719,0.3188720047473908,0.349240779876709,0.40238612890243525,0.4392624795436859,0.4501084685325623,0.462039053440094,0.4750542342662811,0.4891540110111237,0.4869848191738129,0.50759220123291,0.510845959186554,0.5303687453269958,0.5433839559555053,0.5694143176078796,0.5824295282363892,0.6084598898887634,0.6193058490753174,0.6420824527740479,0.650759220123291,0.6583514213562012,0.6572667956352233,0.6550976037979126,0.6268980503082277,0.6214750409126282,0.6019522547721864,0.5824295282363892,0.547722339630127,0.5227765440940858,0.4837310314178467,0.4707158207893372,0.43383947014808655,0.4175705015659332,0.4034707248210906,0.3926247358322144,0.38286334276199346,0.38286334276199346,0.3796095550060272,0.38394793868064886,0.37527114152908325,0.3687635660171508,0.36659437417984003,0.3676789700984954,0.36442515254020685,0.36984816193580633,0.3709327578544617,0.36984816193580633,0.36442515254020685,0.37527114152908325,0.38286334276199346,0.387201726436615,0.36984816193580633,0.3861171305179596,0.37635573744773854,0.3796095550060272,0.381778746843338,0.38394793868064886,0.37527114152908325,0.381778746843338,0.3796095550060272,0.3731019496917725,0.3774403333663941,0.3861171305179596,0.3785249590873718,0.3882863223552704,0.3774403333663941,0.38286334276199346,0.3991323113441467,0.3969631195068359,0.3958785235881805,0.4305856823921204,0.43600866198539723,0.44793927669525146,0.4544468522071839,0.4598698616027832,0.452277660369873,0.4642082452774048,0.4663774371147155,0.4587852358818054,0.4869848191738129,0.7809110879898071,1.0,0.9598698616027832,0.904555320739746,0.8427332043647767,0.7787418365478515,0.7071583271026611,0.6312364339828492,0.5260303616523743,0.4186550974845886,0.3145336210727692,0.23318871855735776,0.20498915016651156,0.14208242297172546,0.06399132311344147,0.0,0.09978307783603667,0.1876355707645416,0.23861171305179596,0.2505423128604889,0.2678958773612976,0.2516269087791443,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0]
    signal4 = [0.8812094926834106,0.9373649954795839,0.8768898248672485,0.7775378227233887,0.7386609315872192,0.7105831503868104,0.7473002076148986,0.7084233164787292,0.5442764759063721,0.2699784040451049,0.1468682438135147,0.10583153367042542,0.09071274101734159,0.0712742954492569,0.05615550652146339,0.036717060953378684,0.03455723449587822,0.036717060953378684,0.030237581580877308,0.012958963401615618,0.010799136012792589,0.0021598271559923887,0.0,0.0043196543119847775,0.006479481700807809,0.0043196543119847775,0.01727861724793911,0.02159827202558517,0.045356370508670814,0.06695464253425598,0.09287256747484209,0.11447083950042722,0.1468682438135147,0.16630668938159943,0.19222462177276609,0.20086392760276797,0.20950323343276975,0.19654427468776706,0.20302376151084894,0.1943844556808472,0.20086392760276797,0.1943844556808472,0.1943844556808472,0.18790496885776517,0.1943844556808472,0.1943844556808472,0.20734341442584991,0.20302376151084894,0.20734341442584991,0.20518358051776883,0.21382290124893188,0.20734341442584991,0.2181425541639328,0.2159827202558517,0.2311015129089356,0.2224622070789337,0.22678185999393466,0.22678185999393466,0.23542116582393646,0.2332613319158554,0.23758099973201754,0.2224622070789337,0.23974081873893735,0.23542116582393646,0.2483801245689392,0.23542116582393646,0.25485959649085993,0.2634989321231842,0.2850971817970276,0.29805615544319153,0.3045356273651123,0.2915766835212708,0.2850971817970276,0.2634989321231842,0.2570194303989411,0.24190065264701846,0.2332613319158554,0.2332613319158554,0.23542116582393646,0.22678185999393466,0.24190065264701846,0.23542116582393646,0.24406047165393824,0.23974081873893735,0.39740821719169617,0.7062634825706482,1.0,0.6198704242706299,0.3045356273651123,0.23758099973201754,0.2678185701370239,0.23974081873893735,0.24190065264701846,0.2332613319158554,0.24190065264701846,0.23974081873893735,0.25269979238510126,0.24406047165393824,0.2505399584770202,0.24406047165393824,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0]

    signal = []
    
    signal.append(signal1)
    signal.append(signal2)
    signal.append(signal3)
    signal.append(signal4)
    
    ecg_input = st.selectbox('Selectioner un signal', options=signal)
    
    import tensorflow as tf
    # Charger le modèle sauvegardé
    model = tf.keras.models.load_model("models/rnn_model.h5")

    #model = joblib.load('rnn_model.joblib')

    if st.button("Prédiction", key="button9"):
        # Vérifier si un signal ECG a été saisi
        if ecg_input:
            try:
                # Convertir le signal ECG en une liste de nombres à virgule flottante
                ecg_list = ecg_input

                # Convertir la liste en un tableau numpy
                signal_ecg_test = np.array(ecg_list)

                # Vérifier la longueur du signal ECG
                if len(signal_ecg_test) == 187:  # Assumer que la longueur attendue est de 187 (vous pouvez ajuster selon votre cas)
                    # Reshape the signal_ecg_test for prediction
                    reshaped_signal = signal_ecg_test.reshape(1, -1)  # Reshape the signal to (1, num_features)

                    # Créer une barre de progression
                    progress_bar = st.progress(0)

                    # Make predictions using the trained model
                    prediction = model.predict(reshaped_signal)

                    # Mettre à jour la barre de progression à 50%
                    progress_bar.progress(50)

                    # Simuler un temps d'attente pour la prédiction (vous pouvez remplacer cette partie par votre propre logique de prédiction)
                    time.sleep(2)

                    # Mettre à jour la barre de progression à 100%
                    progress_bar.progress(100)

                    # Get the predicted class label (0 or 1)
                    label = 1 if prediction > 0.5 else 0

                    # Compute the predicted probabilities manually
                    prob_positive = prediction
                    prob_negative = 1 - prob_positive

                    prob_positive = prob_positive * 100
                    prob_negative = prob_negative * 100
                    
                    # Créer un objet de graphe avec Plotly
                    fig = go.Figure()
                    fig.add_trace(
                        go.Scatter(x=np.arange(len(signal_ecg_test)), y=signal_ecg_test, mode='lines', name='Signal ECG',
                                line=dict(color='red')))
                    fig.update_layout(title="Signal ECG", xaxis_title="Temps", yaxis_title="Amplitude")

                    # Afficher le graphe du signal ECG avec Streamlit et Plotly
                    st.plotly_chart(fig)

                    # Afficher le résultat de la prédiction et la probabilité
                    if label == 0:
                        st.success("Prédiction du signal ECG classé normal (0).")
                        st.write("Probabilité de la prédiction obtenue :", prob_negative)
                    else:
                        st.error("Prédiction du signal ECG classé anormal (1).")
                        st.write("Probabilité de la prédiction obtenue :", prob_positive)
                else:
                    st.warning("La longueur du signal ECG doit être de 187.")
            except ValueError:
                st.warning("Veuillez saisir un signal ECG valide.")
        else:
            st.warning("Veuillez saisir un signal ECG valide.")


    
            
if __name__ == '__main__':
    main()
